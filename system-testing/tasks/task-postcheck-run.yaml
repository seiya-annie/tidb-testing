apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: systesting-postcheck-run
spec:
  params:
    - name: run-id
      type: string
  workspaces:
  - name: manifest
    mountPath: /adhoc-manifests
  steps:
  - name: generate-run-manifest
    image: hub.pingcap.net/qa/kubetools:20200730
    script: |
      #!/usr/bin/env bash
      echo "generating workload manifest..."
      file="$(workspaces.manifest.path)/run1.yaml"
      ctlip=`kubectl get tr | awk '$1 ~ /ctl/ {print $5}'`
      ctlport=`kubectl get tr | awk '$1 ~ /ctl/ {print $4}'`
      ctlclusterip=`kubectl get tr | awk '$1 ~ /ctl/ {print $5}'`
      echo "ctl ip is ($ctlip), ctl port is ($ctlport)"
      cat <<EOF > $file
      apiVersion: naglfar.pingcap.com/v1
      kind: TestWorkload
      metadata:
        name: "$(params.run-id)-postcheck-run"
      spec:
        clusterTopologies:
          - name: "$(params.run-id)"
            aliasName: cluster
        workloads:
          - name: "$(params.run-id)-postcheck"
            dockerContainer:
              resourceRequest:
                name: "$(params.run-id)"
                node: workload2
              image: hub.pingcap.net/migration-test/migration:v15
              imagePullPolicy: IfNotPresent
              command:
                - /bin/bash
                - -c
                - |
                  set -x

                  tidbHost=\`echo \$cluster_tidb0 | awk -F ":" '{print \$1}'\`
                  tidbPort=\`echo \$cluster_tidb0 | awk -F ":" '{print \$2}'\`

                  cd /upgrade-test/
                  cat /upgrade-test/keywords/variables.robot
                  tidbHoststr=\`echo $tidbHost | sed 's/\./\\\\./g'\`
                  ctlipstr=\`echo $ctlip | sed 's/\./\\\\./g'\`
                  ctlportstr=\`echo $ctlport\`
                  #sed -i "s/Chrome/headlessChrome/g" keywords/variables.robot
                  sed -i "s/172\.16\.5\.101/\$tidbHost/g" keywords/variables.robot
                  sed -i "s/cluster_control_ip = \"172.16.5.101\"/cluster_control_ip = \"\$ctlipstr\"/g" config.toml
                  sed -i "s/172\.16\.5\.101/\$tidbHost/g" config.toml
                  sed -i "s/172\.16\.4\.82/\$tidbHost/g" config.toml
                  sed -i "s/4\.0\.11/\5\.0\.0/g" config.toml
                  echo "ctl ip is ($ctlip), ctl port is ($ctlport)"
                  #sed -i "s/22/\$ctlportstr/g" config.toml

                  cat /upgrade-test/keywords/variables.robot
                  cat /upgrade-test/config.toml

                  robot -i postcheck /upgrade-test/UI_testcase/tidb_dashboard.robot > result.txt
                  cat "result.txt"
                  robot -i postcheck /upgrade-test/UI_testcase/grafana.robot > g_result.txt
                  cat g_result.txt

                  cd /upgrade-test/API_TEST
                  pytest prometheus_api_test.py
                  
                  # get system variables
                  mysql -uroot -P "\$tidbPort" -h "\$tidbHost" -e 'show variables;' | tee /upgrade-test/postcheck-result/systemvariable-post.txt
                  cat /upgrade-test/postcheck-result/systemvariable-post.txt

                  # get user privi
                  mysql -uroot -P "\$tidbPort" -h "\$tidbHost" -e 'show grants for qatest;' > /upgrade-test/postcheck-result/qatest-priv-post.txt
                  mysql -uroot -P "\$tidbPort" -h "\$tidbHost" -e 'show grants for root;' >> /upgrade-test/postcheck-result/qatest-priv-post.txt

                  cd /upgrade-test/Function_Test
                  pytest postcheck_test.py 

                  #------tiflash--------
                  mysql -uroot -P "\$tidbPort" -h "\$tidbHost" -e 'desc select count(uid) from bank.account;' |tee /upgrade-test/postcheck-result/tiflash-postcheck.txt
                  count=\`grep "tiflash" /upgrade-test/postcheck-result/tiflash-postcheck.txt | wc -l\`
                  if [ \$count -gt 0 ]; then
                      echo "tiflash work normal"
                  fi

                  
                  
      EOF
      echo "generating workload-run manifest...done"
      cat "$file"
  - name: workload-tail-f
    image: hub.pingcap.net/qa/kubetools:20200730
    script: |
      #!/usr/bin/env bash
      set -xe
      twName="$(params.run-id)-postcheck-run"
      echo "ensure test-workload($twName) does not exists"
      exists=`kubectl get tw $twName >/dev/null && echo "yes" || echo "no"`
      if [ "$exists" == "yes" ]; then
        echo "test workload($twName) already exists, delete it."
        kubectl delete tw $twName
      fi
      
      echo "create test-workload($twName)..."
      kubectl apply -f "$(workspaces.manifest.path)/run1.yaml"
      count=100
      while true
      do
        state=`kubectl get tw "$twName" -ojsonpath='{.status.state}' || echo pending`
        echo "current workload state: $state"
        if [ "succeeded" == "$state" ]; then
          break
        elif [ "failed" == "$state" ]; then
          break
        elif [ "running" == "$state" ]; then
          break
        elif [ $count -lt 0 ]; then
          break
        fi
        echo "workload wait another 5s"
        sleep 20
        let "count--"
      done
      curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/PingCAP-QE/Naglfar/master/scripts/kubectl-naglfar-installer.sh | sh
      ~/.Naglfar/bin/naglfar logs $twName -n $(context.taskRun.namespace) --follow
      # kubectl delete tw $twName
